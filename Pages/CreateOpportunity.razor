@page "/createOpportunity"
@using WebAPI.Models;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject IOpportunityService  Iopportunity;
@inject ISellerService Iseller;
@inject IJSRuntime IJSRuntime;
@inject NavigationManager NavManager;



<div class="Tilte-Opportunity">
	<h3>Criar Oportunidade</h3>

</div>

<div class="Form-Opportunity">

	@if(sellers == null)
	{
		<p>Carregando...</p>

	}else{
	
	
	<EditForm Model="Form">

		<ValidationSummary/>

		<div class="form-group">
	
			<div class="NameOpportunity">

				<label for="inputName">Nome da Oportunitidade </label>
				<InputText class="form-control" type="text" placeholder="Nome" @bind-Value="Form.Name" />

			</div>
		</div>

	
		<div class="form-group">
			<div class="valueOpportunity">
				<label for="inputValue">Value:</label>
				<InputNumber placeholder="Valor" class="form-control" @bind-Value="Form.Value"></InputNumber>
			</div>
		</div>

		<div class="form-group">
			<div  class="cnpjOpportunity">
				<label  for="inputCnpj">CNPJ:</label>
				<InputText placeholder="CNPJ" class="form-control" @bind-Value="value.Number" ></InputText>

			</div>
		</div>

	
		<div class="form-group">

		 <div class="sellerOpportunity">

			<label for="inputSeller">Vendedor</label>

			<InputSelect class="form-control" @bind-Value="seller.Id">
			
				<option value="0"> Selecione...</option>
			
				@foreach(var item in sellers){
					
						<option value="@item.Id">@item.Name</option>
					
				}

			</InputSelect>
		
			</div>
		</div>

		<button  class="btn btn-primary" @onclick="Teste" type="submit">Enviar</button>



	</EditForm>

	
	}
</div>

@code {

	private List<Seller> sellers;
	private Opportunity Form =  new Opportunity();
	private CNPJ value = new CNPJ();
	private Seller seller = new Seller(){

		// Assgn value null to attributos Seller
		Region = 0,
		Email = "null",
		Name = "null"

	};

	// Initializend the Page get date seller
	protected override async Task OnInitializedAsync()
	{
		sellers = await Iseller.GetSeller();


		// alert to user for register seller
		if(sellers.Count() == 0)
		{
			await IJSRuntime.InvokeVoidAsync("Alert", "O cadastro do Vendedor é obrigatório");
			NavManager.NavigateTo("/");

		}

	}

	async Task Teste()
	{
		// Create New Opportunity

		var data = new Opportunity
		{
			Name = Form.Name,
			Cnpj = value,
			Value = Form.Value,
			Seller = seller
		};

		await Iopportunity.CreateOpprotunity(data);
	}




}
